//
//  UpaxPresenter.swift
//  testUpax-David-Guillermo-Lopez-Vazquez
//
//  Created by David Lopez on 1/25/22.
//  Copyright (c) 2022 UPAX. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UpaxPresentationLogic {
    func presentGraphSalinas(response: UpaxModels.FetchSalinas.Response)
}

class UpaxPresenter: UpaxPresentationLogic {
    
    weak var viewController: UpaxDisplayLogic?

    // MARK: Presenter
    func presentGraphSalinas(response: UpaxModels.FetchSalinas.Response) {
        let titles = getGraphTitles(data: response.salinas)
        let questions = getQuestions(data: response.salinas)
        let viewModel = UpaxModels.FetchSalinas.ViewModel(titles: titles, questions: questions)
        viewController?.displayGraph(viewModel: viewModel)
    }
    
    // MARK: - Helpers
    private func getColorBy(index: Int, colors: [String]) -> UIColor {
        var reversedColors = [String]()
        for color in colors.reversed() {
            reversedColors.append(color)
        }
        let strColor = reversedColors[index]
        let color = UIColor(hexString: strColor)
        return color
    }
    
    private func getGraphTitles(data: SalinasData) -> [String] {
        return data.questions.map { $0.text }
    }
    
    private func getQuestions(data: SalinasData) -> [[Chart]] {
        let colors = data.colors
        var questions = [[Chart]]()
        
        for (i, question) in data.questions.enumerated() {
            var charts = [Chart]()
            for (j, chart) in question.chartData.enumerated() {
                let color = getColorBy(index: j, colors: colors)
                let chart = Chart(color: color, text: chart.text, percentage: Double(chart.percetnage))
                charts.append(chart)
            }
            questions.insert(charts, at: i)
        }
        return questions
    }
}



public extension UIColor {
    convenience init(hexString: String) {
        let hex = hexString.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
        var int = UInt64()
        Scanner(string: hex).scanHexInt64(&int)
        let a, r, g, b: UInt64
        switch hex.count {
        case 3: // RGB (12-bit)
            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)
        case 6: // RGB (24-bit)
            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)
        case 8: // ARGB (32-bit)
            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)
        default:
            (a, r, g, b) = (255, 0, 0, 0)
        }
        self.init(red: CGFloat(r) / 255, green: CGFloat(g) / 255, blue: CGFloat(b) / 255, alpha: CGFloat(a) / 255)
    }
}
